/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */
import com.google.cloud.tools.jib.gradle.JibTask

plugins {
    id("java")
    id("application")
    id("jacoco")
    id("com.google.cloud.tools.jib") version "3.4.5"
    id("com.diffplug.spotless") version "7.0.3"
    id("org.sonarqube") version "6.2.0.5505"
    id("org.springframework.boot") version "3.5.0"
    id("io.spring.dependency-management") version "1.1.7"
}

group = "org.jothika.costoperator"
version = "0.3.0-SNAPSHOT"

ext {
    javaVersion = JavaVersion.VERSION_21
    josdkVersion = "5.1.0"
    fabric8Version = "7.3.1"
    mockitoVersion = "5.18.0"
}

repositories {
    mavenCentral()
}

dependencies {

    implementation("org.springframework.boot:spring-boot-starter")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    // Spring Boot Starter Email
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    // Java Operator SDK
    implementation("io.javaoperatorsdk:operator-framework:$josdkVersion")
    // Operator SDK JUnit 5 support
    testImplementation("io.javaoperatorsdk:operator-framework-junit-5:$josdkVersion")


    // JUnit
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation("org.mockito:mockito-junit-jupiter:$mockitoVersion")
    testImplementation("io.fabric8:kubernetes-server-mock:$fabric8Version")

    // CRD generation (runtime dependencies)
    implementation("io.fabric8:crd-generator-api-v2:$fabric8Version")
}

configurations.configureEach {
    // https://mvnrepository.com/artifact/io.fabric8/kubernetes-httpclient-vertx
    // There is another version of httpclient conflicting with the vertx version hence excluding it
    exclude group: "io.fabric8", module: "kubernetes-httpclient-vertx"
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
}

application {
    mainClass.set("org.jothika.costoperator.Runner")
}

tasks.test {
    useJUnitPlatform()
    finalizedBy("jacocoTestReport")
}

spotless {
    java {
        clearSteps()
        googleJavaFormat().aosp()
    }
}

jacoco {
    toolVersion = "0.8.13"
    reportsDirectory = layout.buildDirectory.dir("jacoco")
}

tasks.jacocoTestReport {
    dependsOn("test")
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
        xml.outputLocation = layout.buildDirectory.file("reports/jacoco.xml")
    }
}

// Jib configuration
jib {
    from {
        image = "eclipse-temurin:21-jdk"
        platforms {
            platform {
                architecture = "amd64"
                os = "linux"
            }
            platform {
                architecture = "arm64"
                os = "linux"
            }
        }
    }
    to {
        image = "jothikaaravindhan/cost-optimization-operator"
        tags = ["latest", version]
    }
    container {
        mainClass = "org.jothika.costoperator.Runner"
        creationTime = "USE_CURRENT_TIMESTAMP"
    }
}

// Jib work around for configuration cache
tasks.withType(JibTask).configureEach {
    notCompatibleWithConfigurationCache("because https://github.com/GoogleContainerTools/jib/issues/3132")
}

sonar {
    properties {
        property("sonar.projectKey", "jothikaaravindhan_kubernetes-cost-optimization-operator")
        property("sonar.organization", "jothikaaravindhan")
        property("sonar.host.url", "https://sonarcloud.io")
        property("sonar.java.source", JavaVersion.VERSION_21.toString())
        property("sonar.java.target", JavaVersion.VERSION_21.toString())
    }
}